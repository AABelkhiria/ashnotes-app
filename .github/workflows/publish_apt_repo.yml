name: Publish Signed APT Repo

on:
  workflow_call:
    inputs:
      deb_path:
        description: 'The path to the built .deb package'
        required: true
        type: string
    secrets:
      GPG_PRIVATE_KEY:
        description: 'The GPG private key for signing the repository'
        required: true
      GPG_PASSPHRASE:
        description: 'The passphrase for the GPG private key'
        required: true

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: deb-package
          path: .

      - name: Checkout existing gh-pages branch
        uses: actions/checkout@v4
        with:
          ref: 'gh-pages'
          path: 'repo'

      - name: Set up GPG for APT repository signing
        id: gpg
        run: |
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import --passphrase "${{ secrets.GPG_PASSPHRASE }}"
          GPG_KEY_ID=$(gpg --list-secret-keys --with-colons | grep 'sec:' | cut -d: -f5)
          echo "key_id=$GPG_KEY_ID" >> $GITHUB_OUTPUT
          gpg --armor --export "$GPG_KEY_ID" > public.key

      - name: Update the APT repository structure
        run: |
          # Create directory structure if it doesn't exist (for the first run)
          mkdir -p repo/pool/main
          mkdir -p repo/dists/stable/main/binary-amd64

          # Copy the new .deb package into the pool
          cp "./$(basename "./${{ inputs.deb_path }}")" "repo/pool/main/$(basename "./${{ inputs.deb_path }}")"
          
          # Copy public key
          cp public.key repo/
          
          # Navigate into the repository directory
          cd repo

          # Regenerate the Packages file, appending information for all .deb files
          dpkg-scanpackages pool/ > dists/stable/main/binary-amd64/Packages
          gzip -9c < dists/stable/main/binary-amd64/Packages > dists/stable/main/binary-amd64/Packages.gz
          
          # Navigate to the dists/stable directory to create the Release file
          cd dists/stable
          
          # Generate the Release file
          cat > Release <<EOF
          Origin: ${{ github.repository_owner }}
          Label: ${{ github.repository }}
          Suite: stable
          Codename: stable
          Version: 1.0
          Architectures: amd64
          Components: main
          Description: APT repository for ${{ github.repository }}
          Date: $(date -Ru)
          MD5Sum:
           $(md5sum main/binary-amd64/Packages | cut -d' ' -f1) $(stat -c%s main/binary-amd64/Packages) main/binary-amd64/Packages
           $(md5sum main/binary-amd64/Packages.gz | cut -d' ' -f1) $(stat -c%s main/binary-amd64/Packages.gz) main/binary-amd64/Packages.gz
          SHA256:
           $(sha256sum main/binary-amd64/Packages | cut -d' ' -f1) $(stat -c%s main/binary-amd64/Packages) main/binary-amd64/Packages
           $(sha256sum main/binary-amd64/Packages.gz | cut -d' ' -f1) $(stat -c%s main/binary-amd64/Packages.gz) main/binary-amd64/Packages.gz
          EOF
          
          # Sign the Release file
          gpg --default-key ${{ steps.gpg.outputs.key_id }} --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" --clearsign -o InRelease Release
          gpg --default-key ${{ steps.gpg.outputs.key_id }} --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.GPG_PASSPHRASE }}" -abs -o Release.gpg Release

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: repo
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Update APT repository'
