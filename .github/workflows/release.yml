name: Create Release

on:
  push:
    branches:
      - main

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustc, cargo, clippy

      - name: Install dependencies for tauri
        run: |
          sudo apt-get update
          sudo apt install libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Install frontend dependencies
        run: make install

      - name: Get latest tag and increment version
        id: versioning
        run: |
          current_date=$(date +'%y.%m')
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          tag_date=$(echo "$latest_tag" | cut -d. -f1,2)
          if [ "$current_date" == "$tag_date" ]; then
            minor_version=$(echo "$latest_tag" | cut -d. -f3)
            new_minor=$((minor_version + 1))
            new_version="$current_date.$new_minor"
          else
            new_version="$current_date.1"
          fi
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Update version in tauri.conf.json
        run: |
          jq --arg new_version "${{ steps.versioning.outputs.new_version }}" '.version = $new_version' backend/desktop-app/tauri.conf.json > tmp.json && mv tmp.json backend/desktop-app/tauri.conf.json

      - name: Build the application
        run: make build-desktop

      - name: Find debian package
        id: find_deb
        run: |
          file_path=$(find backend/target/release/bundle/deb -name "ashnotes_*_amd64.deb")
          echo "Found deb file at: $file_path"
          echo "deb_path=$file_path" >> $GITHUB_OUTPUT
          
      - name: Create Release and Upload Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.versioning.outputs.new_version }}
          name: "Release ${{ steps.versioning.outputs.new_version }}"
          body: "Release version ${{ steps.versioning.outputs.new_version }}"
          files: ${{ steps.find_deb.outputs.deb_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
